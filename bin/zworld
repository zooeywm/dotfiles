#!/usr/bin/env -S nu --stdin

def main [] {}

# Capture area
def 'main area' [
    --dir (-d): path,
] {
    grim -g (slurp -d) -
    | satty -f - --copy-command wl-copy --early-exit --default-hide-toolbars --output-filename ($dir | save-path)
}

# Capture window
def 'main window' [
    --dir (-d): path,
] {
    grim -g (hyprctl -j activewindow | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"') -
    | satty -f - --copy-command wl-copy --early-exit --default-hide-toolbars --output-filename ($dir | save-path)
}

# Capture fullscreen
def 'main screen' [
    --dir (-d): path,
] {
    grim -o (
        hyprctl monitors -j | from json | where focused | first | get name
    ) -
    | (satty -f - --fullscreen --default-hide-toolbars --output-filename ($dir | save-path)
        --init-tool crop --copy-command wl-copy --early-exit)
}

def 'main record-area' [
    --dir (-d): path,
] {
    let recorder_using = ps | where name == 'wf-recorder'
    let pid_count = $recorder_using | length
    if $pid_count > 0 {
        # Kill all processes of wf-recorder
        $recorder_using | get pid | each {|it| kill $it };
        notify-send "Screen Recording ended."
    } else {
        notify-send "Screen Recording started.";
	    wf-recorder -f ($dir | video-save-path) --audio=alsa_output.pci-0000_63_00.6.analog-stereo.monitor -g (slurp -d)
    }
}

def 'main test' [] {
	wf-recorder -f (video-save-path) --audio=alsa_output.pci-0000_63_00.6.analog-stereo.monitor -g (slurp -d)
}

# Save path
def save-path [] {
    $in
    | default '~/Pictures/screenshot'
    | path join $"grim-(date now | format date '%Y-%m-%d_%H:%M:%S').png"
    | path expand
}

def video-save-path [] {
    $in
    | default '~/Videos/screen-record'
    | path join $"vid-(date now | format date '%Y-%m-%d_%H:%M:%S').mp4"
    | path expand
}
