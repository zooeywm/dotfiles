# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
linemode       = "size"
mouse_events   = ["click", "scroll"]
ratio          = [2, 5, 5]
scrolloff      = 5
show_hidden    = true
show_symlink   = true
sort_by        = "natural"
sort_dir_first = true
sort_reverse   = false
sort_sensitive = true
sort_translit  = true
title_format   = "Yazi: {cwd}"

[preview]
cache_dir       = ""
image_delay     = 0
image_filter    = "nearest"
image_quality   = 50
max_height      = 2000
max_width       = 3200
sixel_fraction  = 20
tab_size        = 2
ueberzug_offset = [0, 0, 0, 0]
ueberzug_scale  = 1
wrap            = "no"

[opener]
binutil = [
    { run = 'strip --only-keep-debug $1 -o $1.debug && strip $1', desc = "strip" },
    { run = 'aarch64-linux-gnu-strip --only-keep-debug $1 -o $1.debug && aarch64-linux-gnu-strip $1', desc = "aarch64-strip" },
]
compress = [
    { run = 'cd $1 && zip -r $1.zip $(realpath --relative-to=$PWD $1) ', desc = "Zip" },
    { run = 'tar -czvf $1.tar.gz $(realpath --relative-to="$PWD" $1) ', desc = "Tar.gz" },
    { run = 'tar -cvf $1.tar $(realpath --relative-to="$PWD" $1) ', desc = "Tar" },
]
deb = [{ run = 'dpkg-deb -x "$1" "${1%.deb}"', desc = "Extract deb here" }]
edit = [{ run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" }]
extract = [{ run = 'unar "$1"', desc = "Extract here", for = "unix" }]
images = [{ run = 'swww img $1', desc = "Set as wallpaper" }]
open = [{ run = 'xdg-open "$1"', desc = "Open", for = "linux" }]
play = [
    { run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
    { run = 'mpv --force-window %*', orphan = true, for = "windows" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]
reveal = [
    { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
    { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]

[open]
rules = [
    { mime = "inode/directory", use = [
        "open",
        "compress",
        "reveal",
    ] },
    { mime = "text/html", use = [
        "open",
        "edit",
        "reveal",
    ] },
    { mime = "text/*", use = [
        "edit",
        "open",
        "reveal",
    ] },
    { mime = "image/*", use = [
        "open",
        "images",
        "reveal",
    ] },
    { mime = "{audio,video}/*", use = [
        "play",
        "open",
        "reveal",
    ] },
    { mime = "inode/empty", use = [
        "edit",
        "open",
        "reveal",
    ] },
    { mime = "application/{,g}zip", use = [
        "extract",
        "reveal",
    ] },
    { name = "*.zip", use = [
        "extract",
        "reveal",
    ] },
    { mime = "application/{tar,bzip*,7z-compressed,xz,rar}", use = [
        "extract",
        "reveal",
    ] },
    { mime = "application/{json,ndjson}", use = [
        "edit",
        "reveal",
    ] },
    { mime = "*/javascript", use = [
        "edit",
        "reveal",
    ] },
    { mime = "application/{sharedlib,x-sharedlib,x-pie-executable}", use = [
        "binutil",
        "reveal",
    ] },
    { mime = "application/{vnd.debian.binary-package,debian.binary-package}", use = [
        "deb",
        "reveal",
    ] },
    { name = "*", use = [
        "reveal",
        "open",
    ] },
]

[tasks]
bizarre_retry    = 5
image_alloc      = 536870912 # 512MB
image_bound      = [0, 0]
macro_workers    = 25
micro_workers    = 10
suppress_preload = false

[plugin]
fetchers = [
    # Mimetype
    { id = "mime", name = "*", run = "mime", prio = "high" },
]
preloaders = [
    # Image
    { mime = "image/svg", run = "magick" },
    { mime = "image/{avif,hei?,jxl,xml}", run = "magick" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/vnd.ms-opentype", run = "font" },
    # Empty file
    # { mime = "inode/empty", run = "empty" },
]
prepend_fetchers = [
    { id = "mime-ext", name = "*", run = "mime-ext", prio = "high" },
    { id = "git", name = "*", run = "git", prio = "normal" },
    { id = "git", name = "*/", run = "git", prio = "normal" },
]
prepend_previewers = [{ name = "*.md", run = "mdcat" }]
prepend_spotters = [{ name = "*", run = "file-extra-metadata" }]
previewers = [
    { name = "*/", run = "folder", sync = true },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
    { mime = "*/xml", run = "code" },
    { mime = "*/javascript", run = "code" },
    { mime = "*/wine-extension-ini", run = "code" },
    # JSON
    { mime = "application/{json,ndjson}", run = "json" },
    # Image
    { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Archive
    { mime = "application/{gzip,x-bzip*,xz,zstd}", run = "ouch" },
    { mime = "application/zip", run = "archive" },
    { name = "*.zip", run = "archive" },
    { mime = "application/{tar,7z-compressed,rar,iso9660-image}", run = "archive" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/vnd.ms-opentype", run = "font" },
    # Fallback
    { name = "*", run = "file" },
]
spotters = [
    { name = "*/", run = "folder" },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
    # Image
    { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # Fallback
    { name = "*", run = "file" },
]

[input]
cursor_blink = true
# cd
cd_offset = [0, 2, 50, 3]
cd_origin = "top-center"
cd_title  = "Change directory:"

# create
create_offset = [0, 2, 50, 3]
create_origin = "top-center"
create_title  = ["Create:", "Create dir:"]

# rename
rename_offset = [0, 1, 50, 3]
rename_origin = "hovered"
rename_title  = "Rename:"

# filter
filter_offset = [0, 2, 50, 3]
filter_origin = "top-center"
filter_title  = "Filter:"

# find
find_offset = [0, 2, 50, 3]
find_origin = "top-center"
find_title  = ["Find next:", "Find previous:"]

# search
search_offset = [0, 2, 50, 3]
search_origin = "top-center"
search_title  = "Search via {n}:"

# shell
shell_offset = [0, 2, 50, 3]
shell_origin = "top-center"
shell_title  = ["Shell:", "Shell (block):"]

[confirm]
# trash
trash_offset = [0, 0, 70, 20]
trash_origin = "center"
trash_title  = "Trash {n} selected file{s}?"

# delete
delete_offset = [0, 0, 70, 20]
delete_origin = "center"
delete_title  = "Permanently delete {n} selected file{s}?"

# overwrite
overwrite_content = "Will overwrite the following file:"
overwrite_offset  = [0, 0, 50, 15]
overwrite_origin  = "center"
overwrite_title   = "Overwrite file?"

# quit
quit_content = "The following task is still running, are you sure you want to quit?"
quit_offset  = [0, 0, 50, 15]
quit_origin  = "center"
quit_title   = "Quit?"

[pick]
open_offset = [0, 1, 50, 7]
open_origin = "hovered"
open_title  = "Open with:"

[which]
sort_by        = "none"
sort_reverse   = false
sort_sensitive = false
sort_translit  = false
