# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
linemode       = "size"
mouse_events   = ["click", "scroll"]
ratio          = [2, 5, 5]
scrolloff      = 5
show_hidden    = true
show_symlink   = true
sort_by        = "natural"
sort_dir_first = true
sort_reverse   = false
sort_sensitive = true
sort_translit  = true
title_format   = "Yazi: {cwd}"

[preview]
cache_dir       = ""
image_delay     = 0
image_filter    = "nearest"
image_quality   = 50
max_height      = 2000
max_width       = 3200
tab_size        = 2
ueberzug_offset = [10, 3, -0.5, -0.5]
ueberzug_scale  = 1
wrap            = "no"

[opener]
binutil = [
    { run = "strip --only-keep-debug %s1 -o %s1.debug && strip %s1", desc = "strip" },
    { run = "aarch64-linux-gnu-strip --only-keep-debug %s1 -o %s1.debug && aarch64-linux-gnu-strip %s1", desc = "aarch64-strip" },
]
compress = [
    { run = "cd %s1 && zip -r %s1.zip $(realpath --relative-to=$PWD %s1)", desc = "Zip" },
    { run = "tar -czvf %s1.tar.gz $(realpath --relative-to=$PWD %s1)", desc = "Tar.gz" },
    { run = "tar -cvf %s1.tar $(realpath --relative-to=$PWD %s1)", desc = "Tar" },
]
deb = [
    { run = "dpkg-deb -x %s1 ${1%.deb} && dpkg-deb -e %s1 ${1%.deb}/DEBIAN", desc = "Extract deb here" },
]
download = [
    { run = "ya emit download --open %S", desc = "Download and open" },
    { run = "ya emit download %S", desc = "Download" },
]
edit = [
    { run = "${EDITOR:-vi} %s", desc = "$EDITOR", for = "unix", block = true },
    { run = "code %s", desc = "code", for = "windows", orphan = true },
    { run = "code -w %s", desc = "code (block)", for = "windows", block = true },
]
extract = [
    { run = "ya pub extract --list %s", desc = "Extract here" },
]
images = [
    { run = "swww img --transition-type=fade --transition-step=255 --transition-duration=1 --transition-fps=120 %s1", desc = "Set as wallpaper" },
]
media = [
    { run = "mediainfo %s1; echo 'Press enter to exit'; read _", block = true, desc = "Show media info", for = "unix" },
    { run = "mediainfo %s1 & pause", block = true, desc = "Show media info", for = "windows" },
]
open = [
    { run = "xdg-open %s1", desc = "Open", for = "linux" },
    { run = "open %s1", desc = "Open", for = "macos" },
    { run = 'start "" %s1', orphan = true, desc = "Open", for = "windows" },
    { run = "termux-open %s1", desc = "Open", for = "android" },
]
reveal = [
    { run = "xdg-open %d1", desc = "Reveal", for = "linux" },
    { run = "open -R %s1", desc = "Reveal", for = "macos" },
    { run = "explorer /select,%s1", orphan = true, desc = "Reveal", for = "windows" },
    { run = "termux-open %d1", desc = "Reveal", for = "android" },
    { run = "'clear; exiftool %s1; echo 'Press enter to exit'; read _'", block = true, desc = "Show EXIF", for = "unix" },
]
terminal-here = [
    { run = "wezterm start --cwd %d1", desc = "Open Terminal Here", for = "linux" },
]

[open]
rules = [
    { mime = "{text/*,inode/empty,*/javascript}", use = ["edit"] },
    { mime = "application/{json,ndjson}", use = ["edit"] },
    { url = "*", use = ["open", "terminal-here", "edit", "reveal"] },
    { mime = "image/*", use = ["images"] },
    { mime = "{audio,video,image}/*", use = ["media"] },
    { mime = "application/{gzip,zip,tar,bzip*,7z*,xz,rar,zstd,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = ["extract"] },
    { mime = "application/{*sharedlib,*executable}", use = ["binutil"] },
    { mime = "application/{*debian.binary-package}", use = ["deb"] },
    { mime = "vfs/*", use = "download" },
    { url = "*/", use = ["compress", "terminal-here", "reveal"] },
]

[tasks]
bizarre_retry    = 3
image_alloc      = 536870912      # 512MB
image_bound      = [10000, 10000]
macro_workers    = 10
micro_workers    = 10
suppress_preload = false

[plugin]
fetchers = [
    # Mimetype
    { id = "mime", url = "*/", run = "mime.dir", prio = "high" },
    { id = "mime", url = "*", run = "mime.file", prio = "high" },
    { id = "git", url = "*/", run = "git" },
]
preloaders = [
    { url = "~/sshfs/**", run = "noop" },
    # Image
    { mime = "image/svg", run = "magick" },
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/ms-opentype", run = "font" },
    # Empty file
    # { mime = "inode/empty", run = "empty" },
]
# prepend_previewers = [{ url = "*.md", run = "mdcat" }]
previewers = [
    { url = "*/", run = "folder" },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
    # JSON
    { mime = "application/{json,ndjson}", run = "json" },
    # Image
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Archive
    { url = "*.{rar,tar,tar.gz,tar.xz,tar.zst,tar.bz2,zip,7z,squashfs}", run = 'piper -- bd ls "$1"' },
    { mime = "application/iso9660-image", run = "archive" },
    { mime = "application/{redhat-package-manager,rpm,android.package-archive}", run = "archive" },
    { mime = "application/debian*-package", run = 'piper -- dpkg -c "$1" | sed "s/^[^ ]* *[^ ]* *[^ ]* *[^ ]* *[^ ]* *//" | less' },
    { url = "*.{AppImage,appimage}", run = "archive" },
    # Virtual Disk / Disk Image 
    { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
    { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
    { url = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/ms-opentype", run = "font" },
    # Virtual file system
    { mime = "vfs/*", run = "vfs" },
    # Empty file
    { mime = "inode/empty", run = "empty" },
    # Fallback
    { url = "*", run = "file" },
]
spotters = [
    { url = "*/", run = "folder" },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
    # Image
    { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    { mime = "vfs/*", run = "vfs" },
    # Fallback
    { url = "*", run = "file" },
]

[input]
cursor_blink = true
# cd
cd_offset = [0, 2, 50, 3]
cd_origin = "top-center"
cd_title  = "Change directory:"
# create
create_offset = [0, 2, 50, 3]
create_origin = "top-center"
create_title  = ["Create:", "Create dir:"]
# rename
rename_offset = [0, 1, 50, 3]
rename_origin = "hovered"
rename_title  = "Rename:"
# filter
filter_offset = [0, 2, 50, 3]
filter_origin = "top-center"
filter_title  = "Filter:"
# find
find_offset = [0, 2, 50, 3]
find_origin = "top-center"
find_title  = ["Find next:", "Find previous:"]
# search
search_offset = [0, 2, 50, 3]
search_origin = "top-center"
search_title  = "Search via {n}:"
# shell
shell_offset = [0, 2, 50, 3]
shell_origin = "top-center"
shell_title  = ["Shell:", "Shell (block):"]

[confirm]
# trash
trash_offset = [0, 0, 70, 20]
trash_origin = "center"
trash_title  = "Trash {n} selected file{s}?"
# delete
delete_offset = [0, 0, 70, 20]
delete_origin = "center"
delete_title  = "Permanently delete {n} selected file{s}?"
# overwrite
overwrite_body   = "Will overwrite the following file:"
overwrite_offset = [0, 0, 50, 15]
overwrite_origin = "center"
overwrite_title  = "Overwrite file?"
# quit
quit_body   = "The following tasks are still running, are you sure you want to quit?"
quit_offset = [0, 0, 50, 15]
quit_origin = "center"
quit_title  = "Quit?"

[pick]
open_offset = [0, 1, 50, 7]
open_origin = "hovered"
open_title  = "Open with:"

[which]
sort_by        = "none"
sort_reverse   = false
sort_sensitive = false
sort_translit  = false
